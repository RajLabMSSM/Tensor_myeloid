str(scaled_zscores)
str(z_scores)
zscores <- (scores - scores_mean) / scores_sd
str(zscores)
# Save specific Component gene sets
zscoreCSV <- function(filePath){
library(scales)
comp <- read.csv(filePath)
scores <- comp$GeneScore
scores_sd <- sd(scores)*sqrt((length(scores)-1)/(length(scores)))
scores_mean <- mean(scores)
zscores <- (scores - scores_mean) / scores_sd
scaled_zscores <- rescale(zscores, to=c(0,1))
newDF <- data.frame(GeneSymbol = comp$GeneSymbol, Z_score = scaled_zscores)
fileName <- gsub(filePath, pattern = ".csv", replacement = "")
write.csv(newDF, paste(fileName, "_Zscores.csv"), quote = F, row.names = F)
}
#zscoreCSV("geneTables/FF_component22.csv")
zscoreCSV(filePath="geneTables/FF_component26.csv")
zscoreCSV("geneTables/FF_component22.csv")
runApp('Tensor_myeloid_ShinyApp.R')
# zscoreCSV("geneTables/FF_component22.csv")
# zscoreCSV(filePath="geneTables/FF_component26.csv")
zscoreCSV(filePath="geneTables/CG_component46.csv")
runApp('Tensor_myeloid_ShinyApp.R')
tmpTable
head(tmpTable)
str(tmpTable)
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("CisGene", "TissScores"))
str(conditionsTable)
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("Comp","CisGene", "TissScores"))
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("Component","CisGene", "TissScores"))
# Get the entries with the smallest P-vals per component / disease
file <- tmpTable <- file %>% dplyr::group_by(SNP, Disease) %>% top_n(n = -1, wt=PVAL) %>%
data.frame()
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("Component","CisGene", "TissScores"))
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("COMP","CisGene", "TissScores"))
str(conditionsTable)
stringr::str_split_fixed(conditionsTable$CisGene, "_")
stringr::str_split_fixed(conditionsTable$CisGene, "_", Inf)
install.packages("tidy")
install.packages("tidyr")
library(tidyr)
?separate
separate(data = conditionsTable, col = CisGene,
into=c("LPS24_score","LPS2_score","IFN_score","Naive_score"),sep = "_")
conditionsTable <- separate(data = conditionsTable, col = CisGene,
into=c("LPS24_score","LPS2_score","IFN_score","Naive_score"),sep = "_")
conditionsTable <- separate(data = conditionsTable, col = TissScores,
into=c("ActivityScore_LPS24","ActivityScore_LPS2","ActivityScore_IFN","ActivityScore_Naive"),sep = "_")
head(conditionsTable)
# Create ActivityScore and TissueScore tables
conditionsTable <- tmpTable %>% select(c("COMP","CisGene", "TissScores"))
conditionsTable <- separate(data = conditionsTable, col = CisGene,
into=c("CisGene_LPS24","CisGene_LPS2","CisGene_IFN","CisGene_Naive"),sep = "_")
conditionsTable <- separate(data = conditionsTable, col = TissScores,
into=c("ActivityScore_LPS24","ActivityScore_LPS2","ActivityScore_IFN","ActivityScore_Naive"),sep = "_")
head(conditionsTable)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
tabNum=7
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
activities <- c("LPS24","LPS2","IFN","Naive")
activities <- c("LPS24","LPS2","IFN","Naive")
paste("CisGene",activities,sep=".")
paste("CisGene",tissues,sep=".")
tissues <- c("Macrophages","Monocytes")
paste("CisGene",tissues,sep=".")
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
install.packages("enrichR")
library(enrichR)
listEnrichrDbs()
libs <- listEnrichrDbs()
dim(libs)
printEnrich()
printEnrich
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
runApp('Tensor_myeloid_ShinyApp.R')
str(file)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
## Col 2
separate(data = file, col = 2)
## Col 2
colnames(file)[2]
separate(data = file, col = 2, into = c("GO.ID","Term","Ananotated","Significant"),sep = "\t")
new <- separate(data = file, col = 2, into = c("GO.ID","Term","Ananotated","Significant"),sep = "\t")
str(new)
new <- separate(data = file, col = 2, into = c("GO.ID","Term","Ananotated","Significant"),sep = "       ")
str(new)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
## Col 2
colnames(file)[2] <- c("GO.ID","Term","Ananotated","Significant")
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
new <- separate(data = file, col = 2, into = c("GO.ID","Term","Ananotated","Significant"),sep = "........................................")
str(new)
str(file)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
str(SPLIT2)
substrRight(col2, 18)
substrRight(col2, 18)
Annotated.Significant <- substrRight(col2, 18)
separate(Annotated.Significant, into=c("Annotated","Significant"), sep = " ")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
Annotated.Significant
separate(Annotated.Significant, into=c("Annotated","Significant"), sep = " ")
separate(Annotated.Significant, col=1, into=c("Annotated","Significant"), sep = " ")
separate(Annotated.Significant, col="Annotated.Significant", into=c("Annotated","Significant"), sep = " ")
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
## Col 3
col3 <-file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t")
str(newTable2)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
str(file)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
trimws(Term, which = "left")
Term <- trimws(Term, which = "left")
Term
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
newTable2[order(Rank.in.classicFisher)]
newTable2[order(Rank.in.classicFisher),]
newTable2[Rank.in.classicFisher < 1]
newTable2[Rank.in.classicFisher < 1,]
newTable2[Rank.in.classicFisher < 1,Rank.in.classicFisher] <- "NA"
newTable2[Rank.in.classicFisher < 1,Rank.in.classicFisher] <
newTable2[Rank.in.classicFisher < 1,Rank.in.classicFisher]
newTable2[Rank.in.classicFisher < 1,"Rank.in.classicFisher"]
newTable2[Rank.in.classicFisher < 1,"Rank.in.classicFisher"] <- "NA"
newTable2[Rank.in.classicFisher < 1,"Rank.in.classicFisher"]
newTable2
newTable2[Rank.in.classicFisher < 1,"Rank.in.classicFisher"]
messedUpRanks <- newTable2[Rank.in.classicFisher,]
str(messedUpRanks)
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
messedUpRanks <- newTable2[Rank.in.classicFisher,]
str(messedUpRanks)
messedUpRanks
messedUpRanks <- newTable2[Rank.in.classicFisher < 1,]
messedUpRanks
newTable2[order(Rank.in.classicFisher),]
messedUpRanks <- newTable2[classicFisher < 1,]
newTable2[order(Rank.in.classicFisher),"Rank.in.classicFisher"]
newTable2 <-newTable2[order(Rank.in.classicFisher),]
c(1:10)
newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
newTable2
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher < 1,]
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher < 1,] <- "NA"
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher < 1, "Rank.in.classicFisher"] <- "NA"
newTable2
newTable2[Rank.in.classicFisher < 1]
newTable2[Rank.in.classicFisher < 1,]
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher < 1, "Rank.in.classicFisher"] <- "NA"
newTable2[Rank.in.classicFisher < 1, "Rank.in.classicFisher"]
newTable2[Rank.in.classicFisher < 1, ]
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
is.integer(.5)
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[is.integer(Rank.in.classicFisher), "Rank.in.classicFisher"] <- "NA"
str(newTable2)
newTable2[is.integer(Rank.in.classicFisher),]
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
newTable2[is.integer(Rank.in.classicFisher)]
newTable2[Rank.in.classicFisher %% 1==0]
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
str(newTable2)
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=as.integer(Rank.in.classicFisher),
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
str(newTable2)
newTable2[!is.integer(Rank.in.classicFisher), "Rank.in.classicFisher"]
newTable2[!is.integer(Rank.in.classicFisher),]
newTable2[is.integer(Rank.in.classicFisher),]
newTable2[Rank.in.classicFisher %% 1==0]
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=as.integer(Rank.in.classicFisher),
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher %% 1==0, "Rank.in.classicFisher"] <- "NA"
newTable2$Rank.in.classicFisher
Rank.in.classicFisher
Rank.in.classicFisher[49]
as.integer(Rank.in.classicFisher)[49]
/as.integer
?as.integer
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
is.integer(Rank.in.classicFisher)
lapply(Rank.in.classicFisher, is.integer)
lapply(Rank.in.classicFisher, is.integer())
Rank.in.classicFisher[is.integer(Rank.in.classicFisher)]
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher %% 1==0, "Rank.in.classicFisher"] <- "NA"
newTable2[Rank.in.classicFisher %% 1==0]
newTable2[1000 > Rank.in.classicFisher, "Rank.in.classicFisher"]
newTable2[1000 > Rank.in.classicFisher]
newTable2[1000 > Rank.in.classicFisher,]
newTable2[1000 < Rank.in.classicFisher,]
newTable2[Rank.in.classicFisher > 1000]
newTable2[Rank.in.classicFisher > 1000,]
# Replace old Rank.in.classicFisher (messed up)
newTable2 <- newTable2[order(Rank.in.classicFisher),]
newTable2
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
# Replace old Rank.in.classicFisher (messed up)
##newTable2 <- newTable2[order(Rank.in.classicFisher),]
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2[Rank.in.classicFisher ==0, "Rank.in.classicFisher"] <- "NA"
newTable2
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2 <- newTable2[order(Rank.in.classicFisher),]
newTable2[Rank.in.classicFisher ==0, "Rank.in.classicFisher"] <- "NA"
newTable2
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=as.integer(Rank.in.classicFisher),
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2 <- newTable2[order(Rank.in.classicFisher),]
newTable2[Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- "NA"
newTable2
str(newTable2)
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=as.integer(Rank.in.classicFisher),
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
str(newTable2)
##newTable2["Rank.in.classicFisher"] <- c(1:dim(newTable2)[1])
# Remove messed up Ranks
newTable2 <- newTable2[order(Rank.in.classicFisher),]
newTable2[Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
newTable2
str(newTable2)
newTable2[Rank.in.classicFisher == 0, "Rank.in.classicFisher"]
newTable2[Rank.in.classicFisher == 0]
newTable2["Rank.in.classicFisher" == 0,]
filter(newTable2, Rank.in.classicFisher == 0)
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
newTable2
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
install.packages("data.table")
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
newTable2 <- newTable2[order(Rank.in.classicFisher),]
newTable2
View(newTable2)
filter(newTable2, as.integer(Rank.in.classicFisher<1))
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
as.integer(Rank.in.classicFisher)
newTable2[as.integer(newTable2$Rank.in.classicFisher)<1.]
newTable2[as.integer(newTable2$Rank.in.classicFisher)<1,]
[as.integer(newTable2$Rank.in.classicFisher)
as.integer(newTable2$Rank.in.classicFisher)
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
newTable2
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
newTable2[as.integer(newTable2$Rank.in.classicFisher)<1,]
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
## Col 3
col3 <-file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher)
str9newTable2
str(newTable2)
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
newTable2[as.integer(newTable2$Rank.in.classicFisher)<1,]
str(newTable2)
newTable2[as.integer(newTable2$Rank.in.classicFisher)<1,]
newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows
data.table::shift(messedUpRows, 1, fill=NA)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows
str(v)
str(messedUpRows)
dplyr::select(messedUpRows, Annotated:topgoFisher)
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
topgoFisher
parentchildFisher <- unlist(lapply(SPLIT3, getElem, 6))
parentchildFisher
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Expected
## Col 3
col3 <-file[,3]
SPLIT3 <- strsplit(col3, " ")
SPLIT3
uni <- unique(x)[n]
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Expected <- unlist(lapply(SPLIT3, getElem, 0))
Expected
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Expected
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
Rank.in.classicFisher
file
str(file)
getElem_mod <- function(x, n){
uni <- unique(x)[n]
if(length(uni) !=5){
n = n+1
}
return(uni[x])
}
getElem_mod <- function(x, n){
uni <- unique(x)[n]
if(length(uni) !=5){
n = n+1
}
return(uni[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
Expected
SPLIT3
eg <- SPLIT3[[1]]
eg
x <- SPLIT3[[1]]
uni <- unique(x)[n]
unique(x)
unique(x)[n]
uni <- unique(x)
uni <- x[x != ""]
uni
numbers <- x[x != ""]
numbers
getElem_mod <- function(x, n){
numbers <- x[x != ""]
if(length(numbers) != 5){
n = n+1
}
return(numbers[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
Expected
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
Rank.in.classicFisher
getElem_mod <- function(x, n){
numbers <- x[x != ""]
if(length(numbers) != 5){
n = n-1
}
return(numbers[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
Expected
numbers[0]
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
getElem_mod <- function(x, n){
numbers <- x[x != ""]
if(length(numbers) != 5){
n = n-1
}
return(numbers[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem_mod, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem_mod, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem_mod, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem_mod, 5))
Expected
Rank.in.classicFisher
classicFisher <- unlist(lapply(SPLIT3, getElem_mod, 3))
classicFisher
x <- SPLIT3[[1]]
SPLIT3
getElem_mod <- function(x, n){
numbers <- x[x != ""]
if(length(numbers) != 5){
print(x)
n = n-1
}
return(numbers[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
getElem_mod <- function(x, n){
numbers <- x[x != ""]
print(numbers)
if(length(numbers) != 5){
n = n-1
}
return(numbers[n])
}
Expected <- unlist(lapply(SPLIT3, getElem_mod, 1))
