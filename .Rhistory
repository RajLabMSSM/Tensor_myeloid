Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
# newTable2 <- newTable2[order(Rank.in.classicFisher),]
# filter(newTable2, as.integer(Rank.in.classicFisher)<1)
# messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
# messedUpRows[c("")]
# dplyr::select(messedUpRows, Annotated:topgoFisher)
#
# Remove 0s, since as.integer() turns all non-integer values in 0
# newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
#data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
file
file <- subset(file, select= -c("BONFERRONI"))
file <- subset(file, select= -BONFERRONI)
file <- subset(file, select= -"BONFERRONI")
file[!("BONFERRONI")]
select(file, -BONFERONNI)
select(file, -"BONFERONNI")
select(file, -c("BONFERONNI"))
select(file, !c("BONFERONNI"))
file[ , !(names(file) %in% "BONFERONNI")]
f  <- file[ , !(names(file) %in% "BONFERONNI")]
str(f)
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
table
table <-  DT::datatable(file, options=opts, filter='top', rownames=F,
class='cell-border stripe', selection='single', extensions=c('Buttons','Scroller'))
runApp('Tensor_myeloid_ShinyApp.R')
getOpts <- function(tabNum){
opts <- list( scrollY = 500, sScrollX="100%", bScrollCollapse=TRUE, pageLength=50,
dom = 'frtipB', buttons = list( list(extend = 'csv', filename=paste("TensorMyeloid_ST", translate(tabNum),sep="_")),
list(extend = 'excel', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
list(extend = 'pdf', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
list(extend = 'print', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
'copy'), paging=FALSE)
return(opts)
}
opts <- getOpts(tabNum)
translate <- function(tabNum){
newNumber <-switch(toString(tabNum), "0"=1, "1"=2, "XXX"=3, "2"=4,
"3"=5, "XX"=6, "4"=7, "5"=8, "6"=9, "7"=10)
return(toString(newNumber))
}
table <-  DT::datatable(file, options=opts, filter='top', rownames=F,
class='cell-border stripe', selection='single', extensions=c('Buttons','Scroller'))
opts <- getOpts(tabNum)
opts$trans_tabNum <- translate(tabNum)
opts
runApp('Tensor_myeloid_ShinyApp.R')
library(shiny); runApp('Tensor_myeloid_ShinyApp.R')
library(dplyr)
dat <- data.table::fread("~/Dropbox/Tensor_myeloid 10.27.2018/SUPPLEMENT/SUPPLEMENTARY_TABLE_29.txt")
dat$Component <- as.factor(dat$Component)
n_components <- dat$Component %>% unique() %>% length()
n_TFs <- dat$TF %>% unique() %>% length()
dat.cast <- data.table::dcast.data.table(dat,formula = TF ~  Component, value.var = "Z-score") %>%
`colnames<-`(paste("C",colnames(.),sep="_")) %>% data.frame()
row.names(dat.cast) <- dat.cast$C_TF
dat.cast <- dat.cast[,!(names(dat.cast)=="C_TF")]
dat.cast[is.na(dat.cast)] <- 0
dat.cast[abs(dat.cast)==Inf] <- 0
library(heatmaply)
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
webshot::install_phantomjs()
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
plotly::orca(hm,"~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
plotly::orca(hm,"~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
plotly::orca(hm,"~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
height = 20, width=10)
plotly::orca(hm,"~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
height = 20, width=10)
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
library(dplyr)
dat <- data.table::fread("~/Dropbox/Tensor_myeloid 10.27.2018/SUPPLEMENT/SUPPLEMENTARY_TABLE_29.txt")
dat$Component <- as.factor(dat$Component)
n_components <- dat$Component %>% unique() %>% length()
n_TFs <- dat$TF %>% unique() %>% length()
# dat %>% group_by(Component) %>% tally()
dat.cast <- data.table::dcast.data.table(dat,formula = TF ~  Component, value.var = "Z-score") %>%
`colnames<-`(paste("C",colnames(.),sep="_")) %>% data.frame()
row.names(dat.cast) <- dat.cast$C_TF
dat.cast <- dat.cast[,!(names(dat.cast)=="C_TF")]
dat.cast[is.na(dat.cast)] <- 0
dat.cast[abs(dat.cast)==Inf] <- 0
library(heatmaply)
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
hm
plotly::orca(hm,"~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
height = 20, width=10)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10)
# Using raster
# library(tidyverse)
#
# ggplot(dat.cast, aes(x=Component, y=TF, fill=`Z-score`) ) +
#   stat_density_2d() +
#   theme(axis.text.x = element_text(angle = 90))
#
hm$x
hm$preRenderHook()
hm$jsHooks
hm$x
plot(hm$x)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10, xlab="Component", ylab="Transcription Factor")
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
return_ppxpy = T,
file = "~/Desktop/Tensor_myeloid/TF_enrichment_plot.png")
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10, xlab="Component", ylab="Transcription Factor")
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
return_ppxpy = T,
file = "TF_enrichment_plot.png")
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
return_ppxpy = F,
file = "TF_enrichment_plot.png")
plotly::orca(hm,"TF_enrichment_plot.png",
height = 20, width=10)
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = .7,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
return_ppxpy = T,
file = "TF_enrichment_plot.png")
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10, xlab="Component", ylab="Transcription Factor")
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png", hm$p,
dpi=400, height = 20, width=10, x="Component", y="Transcription Factor")
hm$p
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")),
dpi=400, height = 20, width=10, x="Component", y="Transcription Factor")
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")),
dpi=400, height = 20, width=10)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")),
dpi=400, height = 15, width=7)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")),
dpi=400, height = 15, width=10)
hm <- heatmaply(dat.cast,
xlab = paste0("Component (n = ",n_components,")"),
ylab=paste0("Transcription Factor (n = ",n_TFs,")"),
main = "Transcription Factor Enrichment",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
return_ppxpy = T,
file = "TF_enrichment_plot.png")
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")),
dpi=400, height = 15, width=15)
dat.cast
# Top TFs
rowMeans(abs(dat.cast))
# Top TFs
sort(rowMeans(abs(dat.cast)))
# Top TFs
sort(rowMeans(abs(dat.cast)), decreasing = T)
# Top TFs
sort(rowMeans(abs(dat.cast)), decreasing = T)[1:50]
# Top TFs
sort(rowMeans(abs(dat.cast)), decreasing = T)[1:50] %>% names()
# Top TFs
top50 <- sort(rowMeans(abs(dat.cast)), decreasing = T)[1:50] %>% names()
dat.cast[top50,]
hm2 <- heatmaply(dat.cast[top50,],
xlab = paste0("Component"),
ylab=paste0("Transcription Factor"),
main = "Transcription Factor Enrichment (Top 50)",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = .7,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
# file = "TF_enrichment_plot.png",
return_ppxpy = T)
hm2
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")),
dpi=400, height = 15, width=15)
hm2 <- heatmaply(dat.cast[top50,],
xlab = paste0("Component"),
ylab=paste0("Transcription Factor"),
main = "Transcription Factor Enrichment (Top 50)",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = 1,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
# file = "TF_enrichment_plot.png",
return_ppxpy = T)
hm2 <- heatmaply(dat.cast[top50,],
xlab = paste0("Component"),
ylab=paste0("Transcription Factor"),
main = "Transcription Factor Enrichment (Top 50)",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = 1,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
# file = "TF_enrichment_plot.png",
return_ppxpy = T)
hm2
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")),
dpi=400, height = 10, width=15)
hm2 <- heatmaply(dat.cast[top50,],
xlab = paste0("Component"),
ylab=paste0("Transcription Factor"),
main = "Transcription Factor Enrichment (Top 50)",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = 1,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
# file = "TF_enrichment_plot.png",
return_ppxpy = T)
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")),
dpi=400, height = 10, width=15)
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")) + theme(legend.title.align=0.5),
dpi=400, height = 10, width=15)
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")) + theme(legend.title.align=0.5),
dpi=400, height = 10, width=15)
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")) + theme(legend.title.align=0.5)
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")) + theme(legend.title.align=0.5)
hm2 <- heatmaply(dat.cast[top50,],
xlab = paste0("Component"),
ylab=paste0("Transcription Factor"),
main = "Transcription Factor Enrichment (Top 50)",
key.title = "Z-score",
col = c("purple","black","yellow"),
height = 20, width=10,
cexRow = 1,
cexCol = 1,
branches_lwd = .7,
subplot_heights = c(.05,.95),
subplot_widths = c(.95,.05),
# file = "TF_enrichment_plot.png",
return_ppxpy = T)
ggsave("~/Desktop/Tensor_myeloid/top50TF_enrichment_plot.png",
hm2$p + labs(title="Transcription Factor Enrichment (Top 50)",
x= paste0("Component"),
y=paste0("Transcription Factor")) + theme(legend.title.align=0.5),
dpi=400, height = 10, width=15)
ggsave("~/Desktop/Tensor_myeloid/TF_enrichment_plot.png",
hm$p + labs(title="Transcription Factor Enrichment",
x= paste0("Component (n = ",n_components,")"),
y=paste0("Transcription Factor (n = ",n_TFs,")")) +
theme(legend.title.align=0.5),
dpi=400, height = 15, width=15)
dat.cast
dat <- data.table::fread("~/Dropbox/Tensor_myeloid 10.27.2018/SUPPLEMENT/SUPPLEMENTARY_TABLE_29.txt")
dat$Component <- as.factor(dat$Component)
dat
dat[,c("TF","Component","Z-score")]
dat[,c("TF","Component","Z-score")] %>% left_join(Component)
dat[,c("TF","Component","Z-score")]
left_join(dat[,c("TF","Component","Z-score")] , Component)
dat[,c("TF","Component","Z-score")] %>% data.frame() %>% left_join(Component)
dat[,c("TF","Component","Z-score")] %>% data.frame() %>% left_join(.,Component)
left_join(dat[,c("TF","Component","Z-score")] %>% data.frame(),Component)
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_point(aes(color=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_point(aes(color=`Z-score`))
dev.off()
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_point(aes(color=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component)) +
# geom_point(aes(color=`Z-score`))
stat_density2d(geom="tile", aes(fill = ..density..), contour = FALSE)
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_contour(aes(color=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component, =`Z-score`)) +
geom_contour(aes(color=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component, z=`Z-score`)) +
geom_contour(aes(color=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_raster(aes(fill=`Z-score`))
ggplot(data = dat, aes(y=TF, x=Component)) +
geom_raster(aes(fill=`Z-score`), interpolate = T)
dat
dist(dat.cast)
dat.cast
dist(as.matrix(dat.cast))
dist(as.matrix(dat.cast))
hclust(dist(dat.cast))
clust <- hclust(dist(dat.cast))
clust
heatmaply(clust)
clust$merge
cutree(hc.rows,k=2)==1,]
clust <- hclust(dist(t(dat.cast)))
clust
hc.rows <- hclust(dist(mtscaled))
hc.cols <- hclust(dist(t(dat.cast)))
dat.cast[cutree(hc.rows,k=2)==1,]
hc.rows <- hclust(dist(mtscaled))
hc.rows <- hclust(dist(dat.cast))
hc.cols <- hclust(dist(t(dat.cast)))
dat.cast[cutree(hc.rows,k=2)==1,]
cutree(hc.rows,k=2)
cutree(hc.rows,k=2)==1
hc.rows
hc.rows$order
dat.cast[hc.rows$order, ]
heatmap(dat.cast[hc.rows$order, hc.cols$order])
heatmap(as.matrix(dat.cast[hc.rows$order, hc.cols$order]))
heatmap(as.matrix(dat.cast))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment", scale = T)
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment", scale = "Z-score")
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
pal=colorRampPalette(c('#f0f3ff','#0033BB')))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
pal=colorRampPalette(c('purple','black','#yellow')))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
pal=colorRampPalette(c('purple','black','yellow')))
install.packages("heatmap.2")
BiocManager::install("heatmap.2")
library(heatmap.2)
install.packages("gplots")
install.packages("gplots")
install.packages("gplots")
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=colorRampPalette(c('purple','black','yellow')), )
col=(c('purple','black','yellow'), )
col=(c('purple','black','yellow'))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=c('purple','black','yellow'))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=c('purple','black','yellow'), key.title="Z-score" )
topo.colors(100)
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=topo.colors(100))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=redgreen(75))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=gplots::redgreen(75))
heatmap(as.matrix(dat.cast),
main = "Transcription Factor Enrichment",
scale="none",
col=gplots::redblue(75))
