component <- info$value
colNum <- info[2]
output$geneTableHeader7 <- renderUI(paste("Genes in CG Component ",component))
if(colNum==0){
# FF gene table
geneList <- compDict_t7[toString(component)]
geneTable <-  str_split_fixed(str_split_fixed(geneList, "@", Inf), "_", Inf)
geneTable <- data.frame(GeneSymbol=geneTable[,1], GeneScore=as.numeric(geneTable[,2]), stringsAsFactors=F)
output$geneTable7 <- createTable(geneTable, opts)
# Gene plot
pdfPath <- paste("CG_Components/cardio_Component_",toString(component),".pdf",sep="")#normalizePath(file.path('./CG_Components', 'cardio_Component_1.pdf'))
helpText(br(), paste("Genes in CG Component ", toString(component)),
br(),
tags$iframe(src=pdfPath, height="300px", width="100%", scrolling="no", seamless=NA))
}
}
})
# # Parse Table 2 correctly
fixTable2 <- function(){
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <-file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
newTable2 <- newTable2[order(Rank.in.classicFisher),]
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows[c("")]
dplyr::select(messedUpRows, Annotated:topgoFisher)
# Remove 0s, since as.integer() turns all non-integer values in 0
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
}
}
shinyApp(ui, server)
conditionsTable[Component %in% sparseFF]
conditionsTable["Component" %in% sparseFF,]
subset(conditionsTable, Component %in% sparseFF)
conditionsTable
sparseFF
subset(conditionsTable, "Component" %in% sparseFF)
sparseFF==conditionsTable$Component
intersect(conditionsTable$Component, sparseFF)
intersect(conditionsTable$Component, sparseFF)
sparseFF
conditionsTable$Component
conditionsTable[conditionsTable$Component %in% sparseFF,]
conditionsTable
conditionsTable[conditionsTable$Component %in% sparseFF,]
conditionsTable[conditionsTable["Component"] %in% sparseFF,]
View(v=conditionsTable)
View(conditionsTable)
typeof(sparseFF)
# Include only SPARSE components
sparseFF <- c(lapply(read.csv("sparseComponents/sparseFF.csv",header = F, stringsAsFactors = F), as.character))
conditionsTable[conditionsTable["Component"] %in% sparseFF,]
sparseFF
conditionsTable[conditionsTable["Component"] %in% sparseFF$V1,]
conditionsTable[conditionsTable$Component %in% sparseFF$V1,]
conditionsTable[Component %in% sparseFF$V1,]
conditionsTable["Component" %in% sparseFF$V1,]
conditionsTable[conditionsTable$Component %in% sparseFF$V1,]
conditionsTable_sparse <- conditionsTable[conditionsTable$Component %in% sparseFF$V1,]
dim(conditionsTable_sparse)
dim(conditionsTable)
file <- file[file$Component %in% sparseFF$V1,]
file
# Include only SPARSE components
sparse <- lapply(read.csv("sparseComponents/sparseCG.csv",header = F, stringsAsFactors = F), as.character)
sparse
runApp('Tensor_myeloid_ShinyApp.R')
dim(file)
dim(unique(file))
# Report
## Number of SNP/Component pairs
file %>% group_by(c("Component","SNP")) %>% count()
file %>% group_by(c("Component","SNP"))
# Report
## Number of SNP/Component pairs
file %>% group_by(Component,SNP)) %>% count()
# Report
## Number of SNP/Component pairs
file %>% group_by(Component,SNP) %>% count()
# Report
## Number of SNP/Component pairs
file %>% group_by(Component,SNP) %>% count() %>% dim()
# Report
## Number of SNP/Component pairs
file %>% group_by(Component,SNP) %>% count() %>% print(dim())
# Report
## Number of SNP/Component pairs
file %>% group_by(Component,SNP) %>% count() %>% dim()
# Report
## Number of SNP/Component pairs
unique_CompSNPS <- file %>% group_by(Component,SNP) %>% count() %>% dim()[1]
# Report
## Number of SNP/Component pairs
unique_CompSNPS <- file %>% group_by(Component,SNP) %>% count() %>% dim()
print(paste("unique # of Component/SNP pairs = ",unique_CompSNPS))
print(paste("unique # of Component/SNP pairs = ",unique_CompSNPS[1]))
print(paste("Unique Components = ",file$Component))
print(paste("Unique Components = ",unique(file$Component)) %>% dim)
print(paste("Unique Components = ",unique(file$Component)) %>% dim())
unique(file$Component)) %>% dim()
nique(file$Component))
unique(file$Component))
unique(file$Component)
unique(file$Component) %>% length()
length(sparse)
dim(sparse)
sparse
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
# Include only SPARSE components
sparse <- lapply(read.csv("sparseComponents/sparseCG.csv",header = F, stringsAsFactors = F), as.character)
unique(sparse)
length(unique(sparse))
length(unique(sparse$V1))
runApp('Tensor_myeloid_ShinyApp.R')
# Include only SPARSE components
sparse <- lapply(read.csv("sparseComponents/sparseFF.csv",header = F, stringsAsFactors = F), as.character)$V1
sparse
# Include only SPARSE components
sparse <- lapply(read.csv("sparseComponents/sparseCG.csv",header = F, stringsAsFactors = F), as.character)$V1
sparse
conditionsTable_sparse <- conditionsTable[conditionsTable$Component %in% sparse,]
conditionsTable_sparse
runApp('Tensor_myeloid_ShinyApp.R')
tabNum="XXX"
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
runApp('Tensor_myeloid_ShinyApp.R')
tabNum
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
file <- read.delim2(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
XXX <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
XXX
XXX <- read.csv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
XXX <- read.csv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep=""), fill=NA, header=T, stringsAsFactors=F)
XXX <- read.csv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep=""), fill=NA, header=T, stringsAsFactors=F)
XXX <- read.csv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep=""), fill=NA, header=T, stringsAsFactors=F)
XXX <- read.csv(iconv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep="")), fill=NA, header=T, stringsAsFactors=F)
?iconv
XXX <- read.csv(iconv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep="")), fill=NA, header=T, stringsAsFactors=F,)
XXX
XXX <- read.csv(iconv(paste("supp_tables/SUPPLEMENTARY_TABLE_XXX.csv", sep="")), fill=NA, header=T, stringsAsFactors=F,)
XXX
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
tabNum=5
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
t <- subset(file, FDR < 0.05)
t
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
dim(t)
dim(file)
FDR
str(file)
t <- subset(file, FDR > 0.05)
t
max(file$FDR)
runApp('Tensor_myeloid_ShinyApp.R')
tabNum=4
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(tabNum),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F, na.strings = "NA")
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
switch (tabNum, 0=1, 1=2)
switch (tabNum, "0"=1, 1=2)
tabNum
switch (tabNum, 0,1, 1,2)
tabNum
c(0,1,2,3,4,5,6,7,"XX","XXX")
list(0,1,2,3,4,5,6,7,"XX","XXX")
setNames(object = list(0,1,2,3,4,5,6,7,"XX","XXX"), list(0,1,2,3,4,5,6,7,"XX","XXX"))
dict <- setNames(object = list(0,1,2,3,4,5,6,7,"XX","XXX"), list(0,1,2,3,4,5,6,7,"XX","XXX"))
dict[1]
runApp('Tensor_myeloid_ShinyApp.R')
tabNum
tabNum %in% c(0,1,6,7)
runApp('Tensor_myeloid_ShinyApp.R')
tabNum
switch(toString(tabNum), "0"=1, "1"=2, "XXX"=3, "2"=4,
"3"=5, "XX"=6, "4"=7, "5"=8, "6"=9, "7"=10)
runApp('Tensor_myeloid_ShinyApp.R')
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <- file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
newTable2 <- newTable2[order(Rank.in.classicFisher),]
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows[c("")]
dplyr::select(messedUpRows, Annotated:topgoFisher)
# Remove 0s, since as.integer() turns all non-integer values in 0
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <- file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
newTable2 <- newTable2[order(Rank.in.classicFisher),]
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows[c("")]
dplyr::select(messedUpRows, Annotated:topgoFisher)
# Remove 0s, since as.integer() turns all non-integer values in 0
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <- file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
newTable2 <- newTable2[order(Rank.in.classicFisher),]
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows[c("")]
dplyr::select(messedUpRows, Annotated:topgoFisher)
# Remove 0s, since as.integer() turns all non-integer values in 0
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <- file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
newTable2 <- newTable2[order(Rank.in.classicFisher),]
filter(newTable2, as.integer(Rank.in.classicFisher)<1)
messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
messedUpRows[c("")]
dplyr::select(messedUpRows, Annotated:topgoFisher)
# Remove 0s, since as.integer() turns all non-integer values in 0
newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
#data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
file <- read.delim(paste("supp_tables/SUPPLEMENTARY_TABLE_",toString(2),".txt", sep=""), fill=NA, header=T, stringsAsFactors=F)
## Col 2
col2 <-file[,2]
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
GO.ID <- substr(col2, 1, 11)
Term <- substr(col2, 12, 11+43)
Term <- trimws(Term, which = "left")
Annotated.Significant <- data.frame(Annotated.Significant = substrRight(col2, 18))
SPLIT2 <- strsplit(substrRight(col2, 18), " ")
# Remove all "", then get first and second item from each list, respectively
getElem <- function(x, n){
return( x[x != ""][n])
}
Annotated <- unlist(lapply(SPLIT2, getElem, 1))
Significant  <- unlist(lapply(SPLIT2, getElem, 2))
# getElem_mod <- function(x, n){
#   numbers <- x[x != ""]
#   print(numbers)
#   if(length(numbers) != 5){
#     n = n-1
#   }
#   return(numbers[n])
# }
#
#x <- SPLIT3[[1]]
## Col 3
col3 <- file[,3]
SPLIT3 <- strsplit(col3, " ")
Expected <- unlist(lapply(SPLIT3, getElem, 1))
Rank.in.classicFisher <- unlist(lapply(SPLIT3, getElem, 2))
classicFisher <- unlist(lapply(SPLIT3, getElem, 3))
elimFisher <- unlist(lapply(SPLIT3, getElem, 4))
topgoFisher <- unlist(lapply(SPLIT3, getElem, 5))
newTable2 <- data.frame(Component=file[,1], GO.ID=GO.ID, Term=Term,
Annotated=Annotated, Significant=Significant, Expected=Expected,
Rank.in.classicFisher=Rank.in.classicFisher,
classicFisher=classicFisher, elimFisher=elimFisher, topgoFisher=topgoFisher,
parentchildFisher=file["parentchildFisher"])
# newTable2 <- newTable2[order(Rank.in.classicFisher),]
# filter(newTable2, as.integer(Rank.in.classicFisher)<1)
# messedUpRows <- newTable2[as.integer(Rank.in.classicFisher)<1,]
# messedUpRows[c("")]
# dplyr::select(messedUpRows, Annotated:topgoFisher)
#
# Remove 0s, since as.integer() turns all non-integer values in 0
# newTable2[newTable2$Rank.in.classicFisher == 0, "Rank.in.classicFisher"] <- NA
#data.table::shift(messedUpRows, 1, fill=NA)
write.table(newTable2, "supp_tables/SUPPLEMENTARY_TABLE_2.txt", quote = F, sep="\t", row.names = F)
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
file
file <- subset(file, select= -c("BONFERRONI"))
file <- subset(file, select= -BONFERRONI)
file <- subset(file, select= -"BONFERRONI")
file[!("BONFERRONI")]
select(file, -BONFERONNI)
select(file, -"BONFERONNI")
select(file, -c("BONFERONNI"))
select(file, !c("BONFERONNI"))
file[ , !(names(file) %in% "BONFERONNI")]
f  <- file[ , !(names(file) %in% "BONFERONNI")]
str(f)
runApp('Tensor_myeloid_ShinyApp.R')
runApp('Tensor_myeloid_ShinyApp.R')
table
table <-  DT::datatable(file, options=opts, filter='top', rownames=F,
class='cell-border stripe', selection='single', extensions=c('Buttons','Scroller'))
runApp('Tensor_myeloid_ShinyApp.R')
getOpts <- function(tabNum){
opts <- list( scrollY = 500, sScrollX="100%", bScrollCollapse=TRUE, pageLength=50,
dom = 'frtipB', buttons = list( list(extend = 'csv', filename=paste("TensorMyeloid_ST", translate(tabNum),sep="_")),
list(extend = 'excel', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
list(extend = 'pdf', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
list(extend = 'print', filename=paste("TensorMyeloid_ST",translate(tabNum),sep="_")),
'copy'), paging=FALSE)
return(opts)
}
opts <- getOpts(tabNum)
translate <- function(tabNum){
newNumber <-switch(toString(tabNum), "0"=1, "1"=2, "XXX"=3, "2"=4,
"3"=5, "XX"=6, "4"=7, "5"=8, "6"=9, "7"=10)
return(toString(newNumber))
}
table <-  DT::datatable(file, options=opts, filter='top', rownames=F,
class='cell-border stripe', selection='single', extensions=c('Buttons','Scroller'))
opts <- getOpts(tabNum)
opts$trans_tabNum <- translate(tabNum)
opts
runApp('Tensor_myeloid_ShinyApp.R')
library(shiny); runApp('Tensor_myeloid_ShinyApp.R')
